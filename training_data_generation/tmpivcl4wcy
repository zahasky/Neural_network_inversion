# -*- coding: utf-8 -*-
"""
batching_unbatching_td.py
Created on Tue Aug  18 08:23:38 2020

@author: Christopher Zahasky

This script is used to move around files
"""

import os
import shutil
import numpy as np
import time


#define the function
def batchfiles(batch_size, td_range, td_file_prefix, path2files, path2batch_folders):
    # define range of training data sorted
    batch_folder_inc = np.arange(td_range[0], td_range[-1]+1, batch_size) 
    # start training data file tracker
    td_counter = td_range[0]
    # loop through each folder to be created
    for k in range(1, len(batch_folder_inc)):
        batch_foldername = 'td_' + str(batch_folder_inc[k-1]) + '_to_' + str(batch_folder_inc[k]-1) 
        
        destination_folder = os.path.join(path2batch_folders, batch_foldername)
        # If destination folder doesn't exist then create it
        if not os.path.isdir(destination_folder):
            os.mkdir(destination_folder)
    
        while td_counter < batch_folder_inc[k]:
            print(td_counter)
            # define path to files
            filepath = path2files + td_file_prefix + str(td_counter) + '.csv'
            # copy training data to new folder
            shutil.copy(filepath, destination_folder) # (source, destination) 
            td_counter += 1
            

td_file_prefix = 'tdg_km2_'
path2files = 'D:\\Training_data_generation_2D\\gauss_fields\\no_rotation\\'
path2batch_folders = 'D:\\Training_data_generation_2D\\gauss_fields\\batch_test'
# number of files per folder
batch_size = 2
# number of training data used
td_range = [1, 11]


# Call function and time it
start_td = time.time() # start a timer

batchfiles(batch_size, td_range, td_file_prefix, path2files, path2batch_folders)

# Print final run time
end_td = time.time() # end timer
print('Minutes to sort ', (end_td - start_td)/60) # show run time

# use os.walk(path) on the main path to get ALL subfolders inside path
# for root,dirs, files in os.walk(path):
#     for f in files:
#         if f.endswith(".csv"):
#             filename = os.path.join(root, f)
#             df = pd.read_csv(filename)
#             name = os.path.split(os.path.basename(filename))[1]
#             dest_folder = os.path.basename(os.path.dirname(filename))
#             data_splitter(df, name, dest_folder)
            
            
# shutil.rmtree(path)
